openapi: "3.0.0"
info:
  version: 1.0.0
  title: GOOFR Store REST API
tags:
  - name: User
    description: User operations
  - name: Game
    description: Game operations
  - name: Game Tag
    description: Game tag operations
  - name: Game Multimedia
    description: Game multimedia operations
  - name: Tag
    description: Tag operations
  - name: Multimedia
    description: Multimedia operations
servers:
  - url: https://TODO/api
    description: Production server.
  - url: http://localhost:8080/api
    description: Local server.

paths:
  /users:
    post:
      summary: Create a user.
      operationId: createUser
      description: Creates a new user with the specified data.
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPost"
      responses:
        201:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        409:
          description: Username, email or vatin already exists. Or multimedia does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          $ref: "#/components/responses/InternalServerError"
  /users/{userId}:
    get:
      summary: Get a user by ID.
      operationId: getUserByID
      description: Returns the user with the specified identifier.
      tags:
        - User
      security:
        - BearerAuth: [user]
      parameters:
        - $ref: "#/components/parameters/UserIdPathParam"
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Invalid parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          $ref: "#/components/responses/InternalServerError"
    patch:
      summary: Modify a user by ID.
      operationId: patchUserByID
      description: Modifies the user with the specified identifier. Only the specified fields in the request body are updated.
      tags:
        - User
      security:
        - BearerAuth: [user]
      parameters:
        - $ref: "#/components/parameters/UserIdPathParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPatch"
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Invalid parameters or request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        409:
          description: Username, email or vatin already exists. Or multimedia does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          $ref: "#/components/responses/InternalServerError"
  /users/signin:
    post:
      summary: Sign in a user.
      operationId: signInUser
      description: Returns a JSON Web Token for the specified username or email and password.
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignIn"
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JWT"
        400:
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Incorrect credentials.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          $ref: "#/components/responses/InternalServerError"

  /publishers/{publisherId}/games:
    post:
      summary: Create a game.
      operationId: createGame
      description: Creates a new game with the specified data.
      tags:
        - Game
      security:
        - BearerAuth: [publisher]
      parameters:
        - $ref: "#/components/parameters/PublisherIdPathParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GamePost"
      responses:
        201:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Game"
        400:
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        409:
          description: Publisher or multimedia does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          $ref: "#/components/responses/InternalServerError"
  /publishers/{publisherId}/games/{gameId}:
    get:
      summary: Get a game by ID.
      operationId: getGameByID
      description: Returns the game with the specified identifier.
      tags:
        - Game
      parameters:
        - $ref: "#/components/parameters/PublisherIdPathParam"
        - $ref: "#/components/parameters/GameIdPathParam"
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Game"
        400:
          description: Invalid parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          description: Game not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          $ref: "#/components/responses/InternalServerError"
    patch:
      summary: Modify a game by ID.
      operationId: patchGameByID
      description: Modifies the game with the specified identifier. Only the specified fields in the request body are updated.
      tags:
        - Game
      security:
        - BearerAuth: [publisher]
      parameters:
        - $ref: "#/components/parameters/PublisherIdPathParam"
        - $ref: "#/components/parameters/GameIdPathParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GamePatch"
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Game"
        400:
          description: Invalid parameters or request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          description: Game not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        409:
          description: Multimedia does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          $ref: "#/components/responses/InternalServerError"

  /publishers/{publisherId}/games/{gameId}/tags/{tagId}:
    post:
      summary: Create a game tag association.
      operationId: createGameTag
      description: Creates a game tag association.
      tags:
        - Game Tag
      security:
        - BearerAuth: [publisher]
      parameters:
        - $ref: "#/components/parameters/PublisherIdPathParam"
        - $ref: "#/components/parameters/GameIdPathParam"
        - $ref: "#/components/parameters/TagIdPathParam"
      responses:
        204:
          description: Successful operation.
        400:
          description: Invalid parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          description: Game or tag not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        409:
          description: Association already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: Delete a game tag association.
      operationId: deleteGameTag
      description: Deletes the game tag association.
      tags:
        - Game Tag
      security:
        - BearerAuth: [publisher]
      parameters:
        - $ref: "#/components/parameters/PublisherIdPathParam"
        - $ref: "#/components/parameters/GameIdPathParam"
        - $ref: "#/components/parameters/TagIdPathParam"
      responses:
        204:
          description: Successful operation.
        400:
          description: Invalid parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        409:
          description: Association does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          $ref: "#/components/responses/InternalServerError"

  /publishers/{publisherId}/games/{gameId}/multimedia/{multimediaId}:
    post:
      summary: Create a game multimedia association.
      operationId: createGameMultimedia
      description: Creates a game multimedia association.
      tags:
        - Game Multimedia
      security:
        - BearerAuth: [publisher]
      parameters:
        - $ref: "#/components/parameters/PublisherIdPathParam"
        - $ref: "#/components/parameters/GameIdPathParam"
        - $ref: "#/components/parameters/MultimediaIdPathParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GameMultimediaPost"
      responses:
        204:
          description: Successful operation.
        400:
          description: Invalid parameters or request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          description: Game or multimedia not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        409:
          description: Association already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: Delete a game multimedia association.
      operationId: deleteGameMultimedia
      description: Deletes the game multimedia association.
      tags:
        - Game Multimedia
      security:
        - BearerAuth: [publisher]
      parameters:
        - $ref: "#/components/parameters/PublisherIdPathParam"
        - $ref: "#/components/parameters/GameIdPathParam"
        - $ref: "#/components/parameters/MultimediaIdPathParam"
      responses:
        204:
          description: Successful operation.
        400:
          description: Invalid parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        409:
          description: Association does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          $ref: "#/components/responses/InternalServerError"

  /tags:
    get:
      summary: List tags.
      operationId: listTags
      description: Returns the tags with the specified filter.
      tags:
        - Tag
      parameters:
        - name: sort
          in: query
          description: Name of the field to sort by.
          schema:
            type: string
            enum:
              - name
              - gameCount
            default: name
        - $ref: "#/components/parameters/OrderQueryParam"
        - $ref: "#/components/parameters/LimitQueryParam"
        - $ref: "#/components/parameters/OffsetQueryParam"
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagsPaginated"
        400:
          description: Invalid parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"

  /multimedia:
    put:
      summary: Upload multimedia.
      operationId: uploadMultimedia
      description: Uploads a multimedia file.
      tags:
        - Multimedia
      security:
        - BearerAuth: [user, publisher]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/MultimediaPut"
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Multimedia"
        400:
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        413:
          description: File is too large.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          $ref: "#/components/responses/InternalServerError"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    LimitQueryParam:
      name: limit
      in: query
      description: Amount of resources to get for the provided filter.
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 100
    OffsetQueryParam:
      name: offset
      in: query
      description: Amount of resources to skip for the provided filter.
      schema:
        type: integer
        minimum: 0
        default: 0
    OrderQueryParam:
      name: order
      in: query
      description: Order to sort by.
      schema:
        type: string
        enum:
          - asc
          - desc
        default: asc

    UserIdPathParam:
      name: userId
      in: path
      description: User identifier.
      required: true
      schema:
        $ref: "#/components/schemas/UUID"
    PublisherIdPathParam:
      name: publisherId
      in: path
      description: Publisher identifier.
      required: true
      schema:
        $ref: "#/components/schemas/UUID"
    GameIdPathParam:
      name: gameId
      in: path
      description: Game identifier.
      required: true
      schema:
        $ref: "#/components/schemas/UUID"
    TagIdPathParam:
      name: tagId
      in: path
      description: Tag identifier.
      required: true
      schema:
        $ref: "#/components/schemas/UUID"
    MultimediaIdPathParam:
      name: multimediaId
      in: path
      description: Multimedia identifier.
      required: true
      schema:
        $ref: "#/components/schemas/UUID"

  schemas:
    Error:
      type: object
      required:
        - code
      properties:
        code:
          type: string
        message:
          type: string
    UUID:
      type: string
      format: uuid
      example: "9e3a65b0-0579-4203-8112-d09ab3c6b1ff"
    Date:
      type: string
      format: date
      example: "2017-07-21"
    DateTime:
      type: string
      format: date-time
      example: "2017-07-21T17:32:28Z"
    Username:
      type: string
      minLength: 1
      maxLength: 50
      example: john-doe
    Email:
      type: string
      maxLength: 320
      example: john-doe@email.com
    Password:
      type: string
      format: password
      description: In addition to the length restrictions, the password must contain at least one regular character, one special character, and one number.
      minLength: 14
      maxLength: 72
      example: ReallySecurePassword$123
    Name:
      type: string
      minLength: 1
      maxLength: 100
      example: John Doe
    Description:
      type: string
      maxLength: 200
    Address:
      type: string
      minLength: 1
      maxLength: 100
    Country:
      type: string
      description: ISO 3166-1 alpha-2 code.
      minLength: 2
      maxLength: 2
    Language:
      type: string
      description: BCP 47 language tag.
      minLength: 1
      maxLength: 20
    Vatin:
      type: string
      minLength: 1
      maxLength: 20
    File:
      type: string
      format: binary
      description: File size up to 2 MB.
      maxLength: 2097152
    Checksum:
      type: integer
      format: int64
      description: CRC32 checksum using the Castagnoli93 polynomial.
      minimum: 0
    MediaType:
      type: string
      description: MIME type.
      minLength: 1
      maxLength: 255
    URL:
      type: string
      minLength: 1
      maxLength: 2048

    UserBalance:
      type: number
      format: double

    GameTitle:
      type: string
      minLength: 1
      maxLength: 150
      example: Jump Master
    GamePrice:
      type: number
      format: double
      minimum: 0
    GameIsActive:
      type: boolean
    GameDescription:
      type: string
      minLength: 1
      maxLength: 500
    GameAgeRating:
      type: string
      minLength: 1
      maxLength: 2
      example: 18
    GameFeatures:
      type: string
      minLength: 1
      maxLength: 250
    GameLanguages:
      type: array
      items:
        $ref: "#/components/schemas/Language"
      minItems: 1
      maxItems: 200
    GameRequirements:
      type: object
      required:
        - minimum
        - recommended
      properties:
        minimum:
          $ref: "#/components/schemas/Description"
        recommended:
          $ref: "#/components/schemas/Description"

    GameMultimediaPosition:
      type: integer
      minimum: 0

    SignIn:
      type: object
      required:
        - password
      properties:
        username:
          $ref: "#/components/schemas/Username"
        email:
          $ref: "#/components/schemas/Email"
        password:
          $ref: "#/components/schemas/Password"
    JWT:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVcJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiWiBmFtZSI6IkPvaG4gRG9lIiWiaWF0IjOxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssW5c
    PaginatedResponse:
      type: object
      required:
        - total
      properties:
        total:
          type: integer
          description: The total amount of resources available for the provided filter.
          minimum: 0

    UserPost:
      type: object
      required:
        - username
        - email
        - password
        - displayName
        - dateOfBirth
        - address
        - country
        - vatin
      properties:
        username:
          $ref: "#/components/schemas/Username"
        email:
          $ref: "#/components/schemas/Email"
        password:
          $ref: "#/components/schemas/Password"
        displayName:
          $ref: "#/components/schemas/Name"
        dateOfBirth:
          $ref: "#/components/schemas/Date"
        address:
          $ref: "#/components/schemas/Address"
        country:
          $ref: "#/components/schemas/Country"
        vatin:
          $ref: "#/components/schemas/Vatin"
        pictureMultimediaId:
          $ref: "#/components/schemas/UUID"
    UserPatch:
      type: object
      properties:
        username:
          $ref: "#/components/schemas/Username"
        email:
          $ref: "#/components/schemas/Email"
        displayName:
          $ref: "#/components/schemas/Name"
        dateOfBirth:
          $ref: "#/components/schemas/Date"
        address:
          $ref: "#/components/schemas/Address"
        country:
          $ref: "#/components/schemas/Country"
        vatin:
          $ref: "#/components/schemas/Vatin"
        balance:
          $ref: "#/components/schemas/UserBalance"
        pictureMultimediaId:
          $ref: "#/components/schemas/UUID"
    User:
      type: object
      required:
        - id
        - username
        - email
        - displayName
        - dateOfBirth
        - address
        - country
        - vatin
        - balance
        - createdAt
        - modifiedAt
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        username:
          $ref: "#/components/schemas/Username"
        email:
          $ref: "#/components/schemas/Email"
        displayName:
          $ref: "#/components/schemas/Name"
        dateOfBirth:
          $ref: "#/components/schemas/Date"
        address:
          $ref: "#/components/schemas/Address"
        country:
          $ref: "#/components/schemas/Country"
        vatin:
          $ref: "#/components/schemas/Vatin"
        balance:
          $ref: "#/components/schemas/UserBalance"
        pictureMultimedia:
          $ref: "#/components/schemas/Multimedia"
        createdAt:
          $ref: "#/components/schemas/DateTime"
        modifiedAt:
          $ref: "#/components/schemas/DateTime"

    Publisher:
      type: object
      required:
        - id
        - email
        - name
        - address
        - country
        - vatin
        - createdAt
        - modifiedAt
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        email:
          $ref: "#/components/schemas/Email"
        name:
          $ref: "#/components/schemas/Name"
        address:
          $ref: "#/components/schemas/Address"
        country:
          $ref: "#/components/schemas/Country"
        vatin:
          $ref: "#/components/schemas/Vatin"
        pictureMultimedia:
          $ref: "#/components/schemas/Multimedia"
        createdAt:
          $ref: "#/components/schemas/DateTime"
        modifiedAt:
          $ref: "#/components/schemas/DateTime"

    GamePost:
      type: object
      required:
        - title
        - price
        - isActive
        - description
        - ageRating
        - features
        - languages
        - requirements
        - previewMultimediaId
        - downloadMultimediaId
      properties:
        title:
          $ref: "#/components/schemas/GameTitle"
        price:
          $ref: "#/components/schemas/GamePrice"
        isActive:
          $ref: "#/components/schemas/GameIsActive"
        releaseDate:
          $ref: "#/components/schemas/Date"
        description:
          $ref: "#/components/schemas/GameDescription"
        ageRating:
          $ref: "#/components/schemas/GameAgeRating"
        features:
          $ref: "#/components/schemas/GameFeatures"
        languages:
          $ref: "#/components/schemas/GameLanguages"
        requirements:
          $ref: "#/components/schemas/GameRequirements"
        previewMultimediaId:
          $ref: "#/components/schemas/UUID"
        downloadMultimediaId:
          $ref: "#/components/schemas/UUID"
    GamePatch:
      type: object
      properties:
        title:
          $ref: "#/components/schemas/GameTitle"
        price:
          $ref: "#/components/schemas/GamePrice"
        isActive:
          $ref: "#/components/schemas/GameIsActive"
        releaseDate:
          $ref: "#/components/schemas/Date"
        description:
          $ref: "#/components/schemas/GameDescription"
        ageRating:
          $ref: "#/components/schemas/GameAgeRating"
        features:
          $ref: "#/components/schemas/GameFeatures"
        languages:
          $ref: "#/components/schemas/GameLanguages"
        requirements:
          $ref: "#/components/schemas/GameRequirements"
        previewMultimediaId:
          $ref: "#/components/schemas/UUID"
        downloadMultimediaId:
          $ref: "#/components/schemas/UUID"
    Game:
      type: object
      required:
        - id
        - publisher
        - title
        - price
        - isActive
        - description
        - ageRating
        - features
        - languages
        - requirements
        - previewMultimedia
        - downloadMultimedia
        - multimedia
        - tags
        - createdAt
        - modifiedAt
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        publisher:
          $ref: "#/components/schemas/Publisher"
        title:
          $ref: "#/components/schemas/GameTitle"
        price:
          $ref: "#/components/schemas/GamePrice"
        isActive:
          $ref: "#/components/schemas/GameIsActive"
        releaseDate:
          $ref: "#/components/schemas/Date"
        description:
          $ref: "#/components/schemas/GameDescription"
        ageRating:
          $ref: "#/components/schemas/GameAgeRating"
        features:
          $ref: "#/components/schemas/GameFeatures"
        languages:
          $ref: "#/components/schemas/GameLanguages"
        requirements:
          $ref: "#/components/schemas/GameRequirements"
        previewMultimedia:
          $ref: "#/components/schemas/Multimedia"
        downloadMultimedia:
          $ref: "#/components/schemas/Multimedia"
        multimedia:
          type: array
          items:
            $ref: "#/components/schemas/Multimedia"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        createdAt:
          $ref: "#/components/schemas/DateTime"
        modifiedAt:
          $ref: "#/components/schemas/DateTime"

    GameMultimediaPost:
      type: object
      required:
        - position
      properties:
        position:
          $ref: "#/components/schemas/GameMultimediaPosition"

    Tag:
      type: object
      required:
        - id
        - name
        - createdAt
        - modifiedAt
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        name:
          $ref: "#/components/schemas/Name"
        description:
          $ref: "#/components/schemas/Description"
        createdAt:
          $ref: "#/components/schemas/DateTime"
        modifiedAt:
          $ref: "#/components/schemas/DateTime"
    TagsPaginated:
      allOf:
        - $ref: "#/components/schemas/PaginatedResponse"
        - type: object
          required:
            - tags
          properties:
            tags:
              type: array
              items:
                $ref: "#/components/schemas/Tag"

    MultimediaPut:
      type: object
      required:
        - file
      properties:
        file:
          $ref: "#/components/schemas/File"
    Multimedia:
      type: object
      required:
        - id
        - checksum
        - mediaType
        - url
        - createdAt
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        checksum:
          $ref: "#/components/schemas/Checksum"
        mediaType:
          $ref: "#/components/schemas/MediaType"
        url:
          $ref: "#/components/schemas/URL"
        createdAt:
          $ref: "#/components/schemas/DateTime"

  responses:
    Unauthorized:
      description: Access token is missing or invalid.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Forbidden:
      description: Forbidden.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    InternalServerError:
      description: Unexpected error.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
